apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  #application.instanceLabelKey: applications.argoproj.io/app-name
  resource.customizations.health.numaplane.numaproj.io_PipelineRollout: |
    -- Remove this after releasing Argo CD 2.13. https://github.com/argoproj/argo-cd/pull/19077
    local hs = {}
    local healthyCondition = {}
    local pipelinePaused = {}

    if obj.metadata.generation ~= obj.status.observedGeneration then
      hs.status = "Progressing"
      hs.message = "not yet reconciled"
      return hs
    end

    if obj.status ~= nil then

      if obj.status.phase == "Pending" then
        hs.status = "Progressing"
        hs.message = "phase=Pending"
        return hs
      end

      if obj.status.upgradeInProgress ~= nil and obj.status.upgradeInProgress ~= "" then
        hs.status = "Progressing"
        hs.message = "update in progress"
        return hs
      end

      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "ChildResourcesHealthy" then
            healthyCondition = condition
          end
          if condition.type == "PipelinePausingOrPaused" then
            pipelinePaused = condition
          end
        end
      end

      
      if (healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "PipelineFailed") or obj.status.phase == "Failed" then
        hs.status = "Degraded"
        if obj.status.phase == "Failed" then
          hs.message = obj.status.message
        else
          hs.message = healthyCondition.message
        end
        return hs
      elseif healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "Progressing" then
        hs.status = "Progressing"
        hs.message = healthyCondition.message
        return hs
      elseif (pipelinePaused ~= {} and pipelinePaused.status == "True") then
        hs.status = "Suspended"
        hs.message = pipelinePaused.message
        return hs
      elseif (healthyCondition ~= {} and healthyCondition.status == "True") and obj.status.phase == "Deployed" then
        hs.status = "Healthy"
        hs.message = healthyCondition.message
        return hs
      end
    end
    

    hs.status = "Unknown"
    hs.message = "Unknown Pipeline status"
    return hs
  resource.customizations.health.numaplane.numaproj.io_ISBServiceRollout: |
    -- Remove this after releasing Argo CD 2.13. https://github.com/argoproj/argo-cd/pull/19077
    local hs = {}
    local healthyCondition = {}

    if obj.metadata.generation ~= obj.status.observedGeneration then
      hs.status = "Progressing"
      hs.message = "not yet reconciled"
      return hs
    end

    if obj.status ~= nil then

      if obj.status.phase == "Pending" then
        hs.status = "Progressing"
        hs.message = "phase=Pending"
        return hs
      end

      if obj.status.upgradeInProgress ~= nil and obj.status.upgradeInProgress ~= "" then
        hs.status = "Progressing"
        hs.message = "update in progress"
        return hs
      end

      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "ChildResourcesHealthy" then
            healthyCondition = condition
          end
        end
      end
      
      if (healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "ISBSvcFailed") or obj.status.phase == "Failed" then
        hs.status = "Degraded"
        if obj.status.phase == "Failed" then
          hs.message = obj.status.message
        else
          hs.message = healthyCondition.message
        end
        return hs
      elseif healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "Progressing" then
        hs.status = "Progressing"
        hs.message = healthyCondition.message
        return hs
      elseif healthyCondition ~= {} and healthyCondition.status == "True" and obj.status.phase == "Deployed" then
        hs.status = "Healthy"
        hs.message = healthyCondition.message
        return hs
      end
      
    end

    hs.status = "Unknown"
    hs.message = "Unknown ISBService status"
    return hs
  resource.customizations.health.numaplane.numaproj.io_NumaflowControllerRollout:
    |
    -- Remove this after releasing Argo CD 2.13. https://github.com/argoproj/argo-cd/pull/19077
    local hs = {}
    local healthyCondition = {}

    if obj.metadata.generation ~= obj.status.observedGeneration then
      hs.status = "Progressing"
      hs.message = "not yet reconciled"
      return hs
    end

    if obj.status ~= nil then

      if obj.status.phase == "Pending" then
        hs.status = "Progressing"
        hs.message = "phase=Pending"
        return hs
      end

      if obj.status.upgradeInProgress ~= nil and obj.status.upgradeInProgress ~= "" then
        hs.status = "Progressing"
        hs.message = "update in progress"
        return hs
      end

      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "ChildResourcesHealthy" then
            healthyCondition = condition
          end
        end
      end

      
      if (healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "Degraded") or obj.status.phase == "Failed" then
        hs.status = "Degraded"
        if obj.status.phase == "Failed" then
          hs.message = obj.status.message
        else
          hs.message = healthyCondition.message
        end
        return hs
      elseif healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "Progressing" then
        hs.status = "Progressing"
        hs.message = healthyCondition.message
        return hs
      elseif healthyCondition ~= {} and healthyCondition.status == "True" and obj.status.phase == "Deployed" then
        hs.status = "Healthy"
        hs.message = healthyCondition.message
        return hs
      end
      
    end

    hs.status = "Unknown"
    hs.message = "Unknown NumaflowController status"
    return hs
  resource.customizations.health.numaplane.numaproj.io_MonoVertexRollout: |
    -- Remove this after releasing Argo CD 2.13. https://github.com/argoproj/argo-cd/pull/19688
    local hs = {}
    local healthyCondition = {}

    if obj.metadata.generation ~= obj.status.observedGeneration then
      hs.status = "Progressing"
      hs.message = "not yet reconciled"
      return hs
    end

    if obj.status ~= nil then

      if obj.status.phase == "Pending" then
        hs.status = "Progressing"
        hs.message = "phase=Pending"
        return hs
      end

      if obj.status.upgradeInProgress ~= nil and obj.status.upgradeInProgress ~= "" then
        hs.status = "Progressing"
        hs.message = "update in progress"
        return hs
      end

      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "ChildResourcesHealthy" then
            healthyCondition = condition
          end
        end
      end

      
      if (healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "MonoVertexFailed") or obj.status.phase == "Failed" then
        hs.status = "Degraded"
        if obj.status.phase == "Failed" then
          hs.message = obj.status.message
        else
          hs.message = healthyCondition.message
        end
        return hs
      elseif healthyCondition ~= {} and healthyCondition.status == "False" and healthyCondition.reason == "Progressing" then
        hs.status = "Progressing"
        hs.message = healthyCondition.message
        return hs
      elseif healthyCondition ~= {} and healthyCondition.status == "True" and obj.status.phase == "Deployed" then
        hs.status = "Healthy"
        hs.message = healthyCondition.message
        return hs
      end
      
    end

    hs.status = "Unknown"
    hs.message = "Unknown MonoVertex status"
    return hs
  resource.customizations.actions.numaplane.numaproj.io_PipelineRollout: |
    discovery.lua: |
      local actions = {}
      actions["pause"] = {["disabled"] = true}
      actions["unpause"] = {["disabled"] = true}
      actions["allow-data-loss"] = {["disabled"] = true}
      actions["disallow-data-loss"] = {["disabled"] = true}

      local paused = false
      if obj.spec.pipeline.spec.lifecycle ~= nil and obj.spec.pipeline.spec.lifecycle.desiredPhase ~= nil and obj.spec.pipeline.spec.lifecycle.desiredPhase == "Paused" then
          paused = true
      end
      if paused then
        actions["unpause"]["disabled"] = false
      else
        actions["pause"]["disabled"] = false
      end
      
      if obj.status ~= nil and obj.status.upgradeInProgress == "PipelinePauseAndDrain" then
        actions["allow-data-loss"]["disabled"] = false
      end
      if obj.metadata.annotations ~= nil and obj.metadata.annotations["numaplane.numaproj.io/allow-data-loss"] == "true" then
        actions["disallow-data-loss"]["disabled"] = false
      end
    
      return actions
    definitions:
    - name: pause
      action.lua: |
        if obj.spec.pipeline.spec.lifecycle == nil then
          obj.spec.pipeline.spec.lifecycle = {}
        end
        obj.spec.pipeline.spec.lifecycle.desiredPhase = "Paused"
        return obj
    - name: unpause
      action.lua: |
        obj.spec.pipeline.spec.lifecycle.desiredPhase = "Running"
        return obj
    - name: allow-data-loss
      action.lua: |
        obj.metadata.annotations["numaplane.numaproj.io/allow-data-loss"] = "true"
        return obj
    - name: disallow-data-loss
      action.lua: |
        obj.metadata.annotations["numaplane.numaproj.io/allow-data-loss"] = "false"
        return obj
  resource.customizations.actions.numaplane.numaproj.io_MonoVertexRollout: |
    discovery.lua: |
      local actions = {}
      actions["pause"] = {["disabled"] = true}
      actions["unpause"] = {["disabled"] = true}

      local paused = false
      if obj.spec.monoVertex.spec.lifecycle ~= nil and obj.spec.monoVertex.spec.lifecycle.desiredPhase ~= nil and obj.spec.monoVertex.spec.lifecycle.desiredPhase == "Paused" then
          paused = true
      end
      if paused then
        actions["unpause"]["disabled"] = false
      else
        actions["pause"]["disabled"] = false
      end
      return actions
    definitions:
    - name: pause
      action.lua: |
        if obj.spec.monoVertex.spec.lifecycle == nil then
          obj.spec.monoVertex.spec.lifecycle = {}
        end
        obj.spec.monoVertex.spec.lifecycle.desiredPhase = "Paused"
        return obj
    - name: unpause
      action.lua: |
        obj.spec.monoVertex.spec.lifecycle.desiredPhase = "Running"
        return obj